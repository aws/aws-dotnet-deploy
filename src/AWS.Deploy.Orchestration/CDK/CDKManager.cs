// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0

using System;
using System.Diagnostics;
using System.IO;
using System.Threading;
using System.Threading.Tasks;
using AWS.Deploy.Common.Extensions;
using AWS.Deploy.Orchestration.Utilities;

namespace AWS.Deploy.Orchestration.CDK
{
    /// <summary>
    /// Makes sure that a compatible version of CDK CLI is installed either in the global node_modules
    /// or local node_modules.
    /// </summary>
    public interface ICDKManager
    {
        /// <summary>
        /// Detects whether CDK CLI is installed or not in global node_modules.
        /// If global node_modules don't contain, it checks in local node_modules
        /// If local npm package isn't initialized, it initializes a npm package at <see cref="workingDirectory"/>.
        /// If local node_modules don't contain, it installs CDK CLI version <see cref="cdkVersion"/> in local modules.
        /// </summary>
        /// <param name="workingDirectory">Directory used for local node app</param>
        /// <param name="cdkVersion">Version of CDK CLI</param>
        Task EnsureCompatibleCDKExists(string workingDirectory, Version cdkVersion);
    }

    public class CDKManager : ICDKManager
    {
        private static readonly SemaphoreSlim s_cdkManagerSemaphoreSlim = new(1,1);

        private readonly ICDKInstaller _cdkInstaller;
        private readonly INPMPackageInitializer _npmPackageInitializer;
        private readonly IOrchestratorInteractiveService _interactiveService;
        private readonly IDeployToolWorkspaceMetadata _workspaceMetadata;

        private const string TemplateIdentifier = "AWS.Deploy.Orchestration.CDK.CDKBootstrapTemplate.yaml";

        public CDKManager(ICDKInstaller cdkInstaller, INPMPackageInitializer npmPackageInitializer, IOrchestratorInteractiveService interactiveService, IDeployToolWorkspaceMetadata workspaceMetadata)
        {
            _cdkInstaller = cdkInstaller;
            _npmPackageInitializer = npmPackageInitializer;
            _interactiveService = interactiveService;
            _workspaceMetadata = workspaceMetadata;
        }

        private async Task CreateCDKBootstrapTemplate()
        {
            // The CDK bootstrap template can be generated by running 'cdk bootstrap --show-template'.
            // We need to keep the template up to date while making sure that the 'Staging Bucket' retention policies are set to 'Delete'.
            var cdkBootstrapTemplate = typeof(CdkProjectHandler).Assembly.ReadEmbeddedFile(TemplateIdentifier);
            await using var cdkBootstrapTemplateFile = new StreamWriter(_workspaceMetadata.CDKBootstrapTemplatePath);
            await cdkBootstrapTemplateFile.WriteAsync(cdkBootstrapTemplate);
        }

        public async Task EnsureCompatibleCDKExists(string workingDirectory, Version cdkVersion)
        {
            await s_cdkManagerSemaphoreSlim.WaitAsync();

            try
            {
                await CreateCDKBootstrapTemplate();

                var installedCdkVersion = await _cdkInstaller.GetVersion(workingDirectory);
                if (installedCdkVersion.Success && installedCdkVersion.Result?.CompareTo(cdkVersion) >= 0)
                {
                    _interactiveService.LogDebugMessage($"CDK version {installedCdkVersion.Result} found in global node_modules.");
                    return;
                }

                var isNPMPackageInitialized = _npmPackageInitializer.IsInitialized(workingDirectory);
                if (!isNPMPackageInitialized)
                {
                    await _npmPackageInitializer.Initialize(workingDirectory, cdkVersion);
                    return; // There is no need to install CDK CLI explicitly, npm install takes care of first time bootstrap.
                }

                await _cdkInstaller.Install(workingDirectory, cdkVersion);
            }
            finally
            {
                s_cdkManagerSemaphoreSlim.Release();
            }
        }
    }
}
