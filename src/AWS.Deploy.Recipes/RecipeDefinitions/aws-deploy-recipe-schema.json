{
    "$schema": "http://json-schema.org/draft-07/schema#",
    "$id": "./aws-deploy-recipe-schema.json",
    "title": "AWS .NET deployment tool Recipes",
    "description": "Recipes for deploying application to AWS using the CDK",
    "type": "object",
    "additionalProperties": false,
    "required": [

        "Id",
        "Name",
        "DeploymentType",
        "DeploymentBundle",
        "CdkProjectTemplate",
        "CdkProjectTemplateId",
        "Description",
        "ShortDescription",
        "TargetService",
        "TargetPlatform",
        "RecipePriority",
        "RecommendationRules",
        "OptionSettings"
    ],
    "properties": {
        "$schema": {
            "type": "string",
            "title": "Schema",
            "description": "JSON schema for the document",
            "minLength": 1
        },
        "Id": {
            "type": "string",
            "title": "Unique ID for the recipe",
            "description": "The unique id for the recipe. This value should never been change once the recipe is released because it will be stored in user config files.",
            "minLength": 1
        },
        "Version": {
            "type": "string",
            "title": "Version string for the recipe",
            "description": "Version string for the recipe. Its value will be incremented when the recipe is updated.",
            "minLength": 1
        },
        "Name": {
            "type": "string",
            "title": "Name",
            "description": "The name that will be showed to the user when choosing which recipe to choose for deployment.",
            "minLength": 1
        },
        "DisableNewDeployments": {
            "type": "boolean",
            "title": "DisableNewDeployments",
            "description": "A boolean value that indicates if this recipe should be presented as an option during new deployments."
        },
        "DeploymentType": {
            "type": "string",
            "title": "Deployment type",
            "description": "The technology used to deploy the project.",
            "enum": [ "CdkProject", "BeanstalkEnvironment", "ElasticContainerRegistryImage" ]
        },
        "DeploymentBundle": {
            "type": "string",
            "title": "Deployment Bundle",
            "description": "How the project will be bundled for deployment.",
            "enum": [ "Container", "DotnetPublishZipFile" ]
        },
        "CdkProjectTemplate": {
            "type": "string",
            "title": "CDK Project Template",
            "description": "The path to the directory containing project template for the CDK project",
            "minLength": 1
        },
        "CdkProjectTemplateId": {
            "type": "string",
            "title": "CDK Project Template ID",
            "description": "The id of project template",
            "minLength": 1
        },
        "Description": {
            "type": "string",
            "title": "Description",
            "description": "The description of the recipe",
            "minLength": 1
        },
        "ShortDescription": {
            "type": "string",
            "title": "Short Description",
            "description": "The short description of the recipe",
            "minLength": 1
        },
        "DisplayedResources": {
            "$ref": "#/definitions/DisplayedResources"
        },
        "TargetService": {
            "type": "string",
            "title": "AWS Target Service",
            "description": "The AWS service that the project will be deployed to",
            "minLength": 1
        },
        "TargetPlatform": {
            "type": "string",
            "title": "Target Platform",
            "description": "The environment platform the recipe deploys to. This is used to publish a self-contained .NET application for that platform.",
            "minLength": 1,
            "enum": [ "Linux", "Windows" ]
        },
        "DeploymentConfirmation": {
            "$ref": "#/definitions/DeploymentConfirmation"
        },
        "RecipePriority": {
            "type": "integer",
            "title": "Recipe Priority",
            "description": "The type of test to perform."
        },
        "RecommendationRules": {
            "$ref": "#/definitions/RecommendationRules"
        },
        "Categories": {
            "$ref": "#/definitions/Categories"
        },
        "OptionSettings": {
            "$ref": "#/definitions/OptionSettings"
        },
        "Validators": {
            "$ref": "#/definitions/Validators"
        },
        "PersistedDeploymentProject": {
            "type": "boolean",
            "title": "Persisted Deployment Project",
            "description": "A boolean value that indicates if this recipe is generated from a saved CDK deployment project."
        },
        "BaseRecipeId": {
            "type": "string",
            "title": "Base Recipe Id",
            "description": "The parent recipe Id which was used to create the saved CDK deployment project."
        }
    },
    "definitions": {

        "DisplayedResources": {
            "type": "array",
            "description": "The list of DisplayedResources that lists logical CloudFormation IDs with a description.",
            "items": { "$ref": "#/definitions/DisplayedResource" }
        },

        "DisplayedResource": {
            "type": "object",
            "additionalProperties": false,
            "description": "The logical CloudFormation IDs with a description for CloudFormation resources.",
            "properties": {
                "LogicalId": {
                    "type": "string",
                    "title": "Logical Id",
                    "description": "The CloudFormation ID that represents a resource."
                },
                "Description": {
                    "type": "string",
                    "title": "Description",
                    "description": "The Description gives context to the metadata of the CloudFormation resource."
                }
            }
        },

        "DeploymentConfirmation": {
            "type": "object",
            "additionalProperties": false,
            "description": "Settings for asking the user to confirm they want to continue with the deployment.",
            "properties": {
                "DefaultMessage": {
                    "type": "string",
                    "title": "Default Message",
                    "description": "The message displayed to the user to confirm they want to continue with the deployment."
                }
            }
        },

        "RecommendationRules": {
            "type": "array",
            "description": "The rules that determine if the recipe is compatible with the project.",
            "items": { "$ref": "#/definitions/RecommendationRule" }
        },
        "RecommendationRule": {
            "type": "object",
            "additionalProperties": false,
            "required": [ "Tests" ],
            "properties": {
                "Comment": {
                    "type": "string",
                    "title": "Comment",
                    "description": "Comment to help recipe author document their decisions. The comment is not shown to users of the recipe."
                },
                "Tests": {
                    "type": "array",
                    "items": { "$ref": "#/definitions/RuleTest" }
                },
                "Effect": {
                    "type": "object",
                    "properties": {
                        "Pass": {
                            "$ref": "#/definitions/RuleEffect"
                        },
                        "Fail": {
                            "$ref": "#/definitions/RuleEffect"
                        }
                    }
                }
            }
        },

        "RuleTest": {
            "type": "object",
            "additionalProperties": false,
            "required": [ "Type", "Condition" ],
            "properties": {
                "Type": {
                    "type": "string",
                    "title": "Test Type",
                    "description": "The type of test to perform.",
                    "enum": [
                        "MSProjectSdkAttribute",
                        "MSProperty",
                        "MSPropertyExists",
                        "FileExists",
                        "NuGetPackageReference"
                    ]
                },
                "Condition": {
                    "type": "object"
                }
            },
            "allOf": [
                {
                    "if": {
                        "properties": { "Type": { "const": "MSProjectSdkAttribute" } }
                    },
                    "then": {
                        "properties": {
                            "Condition": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [ "Value" ],
                                "properties": {
                                    "Value": {
                                        "type": "string",
                                        "title": "SDK Value",
                                        "description": "The expected value of the sdk attribute",
                                        "enum": [
                                            "Microsoft.NET.Sdk",
                                            "Microsoft.NET.Sdk.Web",
                                            "Microsoft.NET.Sdk.BlazorWebAssembly",
                                            "Microsoft.NET.Sdk.Worker"
                                        ]
                                    }
                                }
                            }
                        }
                    }
                },

                {
                    "if": {
                        "properties": { "Type": { "const": "MSProperty" } }
                    },
                    "then": {
                        "properties": {
                            "Condition": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [ "PropertyName", "AllowedValues" ],
                                "properties": {
                                    "PropertyName": {
                                        "type": "string",
                                        "title": "Property Name",
                                        "description": "The name of the property in the PropertyGroup to inspect.",
                                        "minLength": 1
                                    },
                                    "AllowedValues": {
                                        "type": "array",
                                        "items": {
                                            "type": "string"
                                        },
                                        "title": "Allowed Values",
                                        "description": "The list of allowed values for the property."
                                    }
                                }
                            }
                        }
                    }
                },

                {
                    "if": {
                        "properties": { "Type": { "const": "MSPropertyExists" } }
                    },
                    "then": {
                        "properties": {
                            "Condition": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [ "PropertyName" ],
                                "properties": {
                                    "PropertyName": {
                                        "type": "string",
                                        "title": "Property Name",
                                        "description": "The name of the property to check for existence",
                                        "minLength": 1
                                    }
                                }
                            }
                        }
                    }
                },

                {
                    "if": {
                        "properties": { "Type": { "const": "FileExists" } }
                    },
                    "then": {
                        "properties": {
                            "Condition": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [ "FileName" ],
                                "properties": {
                                    "FileName": {
                                        "type": "string",
                                        "title": "File Exists",
                                        "description": "The name of the file to check if it exists within the project.",
                                        "minLength": 1
                                    }
                                }
                            }
                        }
                    }
                },

                {
                    "if": {
                        "properties": { "Type": { "const": "NuGetPackageReference" } }
                    },
                    "then": {
                        "properties": {
                            "Condition": {
                                "type": "object",
                                "additionalProperties": false,
                                "required": [ "NuGetPackageName" ],
                                "properties": {
                                    "NuGetPackageName": {
                                        "type": "string",
                                        "title": "NuGet Package Exists",
                                        "description": "The name of the NuGet package to check if it being referenced by the project.",
                                        "minLength": 1
                                    }
                                }
                            }
                        }
                    }
                }
            ]
        },

        "RuleEffect": {
            "type": "object",
            "additionalProperties": false,
            "properties": {
                "Include": {
                    "type": "boolean",
                    "title": "Include",
                    "description": "If true the rule allows recipe to be included, if false the recipe will be excluded."
                },
                "PriorityAdjustment": {
                    "type": "integer",
                    "title": "Priority Adjustment",
                    "description": "Adjust the base priority"
                }
            }
        },
        "Validators": {
            "type": "array",
            "items": {
                "type": "object",
                "properties": {
                    "ValidatorType": {
                        "type": "string",
                        "enum": [
                            "FargateTaskSizeCpuMemoryLimits",
                            "ValidDockerfilePath"
                        ]
                    }
                },
                "allOf": [
                    {
                        "if": {
                            "properties": { "ValidatorType": { "const": "FargateTaskSizeCpuMemoryLimits" } }
                        },
                        "then": {
                            "properties": {
                                "Configuration": {
                                    "properties": {
                                        "InvalidCpuValueValidationFailedMessage": {
                                            "type": "string"
                                        },
                                        "CpuOptionSettingsId": {
                                            "type": "string"
                                        },
                                        "MemoryOptionSettingsId": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    },
                    {
                        "if": {
                            "properties": { "ValidatorType": { "const": "MinMaxConstraint" } }
                        },
                        "then": {
                            "properties": {
                                "Configuration": {
                                    "properties": {
                                        "ValidationFailedMessage": {
                                            "type": "string"
                                        },
                                        "MinValueOptionSettingsId": {
                                            "type": "string"
                                        },
                                        "MaxValueOptionSettingsId": {
                                            "type": "string"
                                        }
                                    }
                                }
                            }
                        }
                    }
                ]
            }
        },
        "Categories": {
            "type": "array",
            "items": { "$ref": "#/definitions/Category" }
        },
        "Category": {
            "type": "object",
            "additionalItems": false,
            "required": [
                "Id",
                "DisplayName",
                "Order"
            ],
            "properties": {
                "Id": {
                    "type": "string",
                    "title": "The unique id for the category.",
                    "description": "The unique id for the category in the recipe. This value is applied to each top level setting to map settings to categories",
                    "minLength": 1
                },
                "DisplayName": {
                    "type": "string",
                    "title": "Display Name",
                    "description": "Display name show in UI screens.",
                    "minLength": 1
                },
                "Order": {
                    "type": "number",
                    "title": "Order",
                    "description": "Used to sort categories in ui. Categories are shown in sorted descending order.",
                    "minLength": 1
                }
            }
        },
        "OptionSettings": {
            "type": "array",
            "items": { "$ref": "#/definitions/OptionSetting" }
        },
        "OptionSetting": {
            "type": "object",
            "additionalProperties": false,
            "required": [ "Id", "Name", "Description", "Type" ],
            "properties": {
                "Id": {
                    "type": "string",
                    "pattern": "^[a-zA-Z0-9_-]+$",
                    "title": "Unique ID for the setting",
                    "description": "The unqiue id for the setting. This value should never been change once the recipe is released because it will be stored in user config files.",
                    "minLength": 1
                },
                "ParentSettingId": {
                    "type": "string",
                    "title": "Parent Setting Id",
                    "description": "The id of the parent setting. This is used by type hints to look up all of the existing resources of this setting using the id of the parent resource.",
                    "minLength": 1
                },
                "Name": {
                    "type": "string",
                    "title": "Name",
                    "description": "The name which will be shown to the user for the setting.",
                    "minLength": 1
                },
                "Description": {
                    "type": "string",
                    "title": "Description",
                    "description": "The description of the setting which will be shown to end users.",
                    "minLength": 1
                },
                "Category": {
                    "type": "string",
                    "title": "Category",
                    "description": "The category for the setting used to organize ui screens. Category should only be set for top level settings. If a category is not set it will be included into the 'General' category."
                },
                "Type": {
                    "type": "string",
                    "title": "Type",
                    "description": "The data type of the setting.",
                    "minLength": 1,
                    "enum": [ "String", "Int", "Bool", "Object", "KeyValue", "List", "Double" ]
                },
                "TypeHint": {
                    "type": "string",
                    "title": "Type Hint",
                    "description": "Hint to deployment tool to use to provide extra context for the setting. For example the value could be 'ECSCluster' and the deployment tool can show a list of ECS clusters to pick from.",
                    "minLength": 1,
                    "enum": [
                        "BeanstalkApplication",
                        "BeanstalkEnvironment",
                        "BeanstalkRollingUpdates",
                        "InstanceType",
                        "WindowsInstanceType",
                        "IAMRole",
                        "ECSCluster",
                        "ECSService",
                        "ECSTaskSchedule",
                        "EC2KeyPair",
                        "Vpc",
                        "DotnetBeanstalkPlatformArn",
                        "DotnetWindowsBeanstalkPlatformArn",
                        "DotnetPublishSelfContainedBuild",
                        "DotnetPublishBuildConfiguration",
                        "DotnetPublishAdditionalBuildArguments",
                        "DockerExecutionDirectory",
                        "DockerBuildArgs",
                        "ExistingSubnets",
                        "ExistingVpc",
                        "ExistingSecurityGroups",
                        "ExistingBeanstalkApplication",
                        "ExistingIAMRole",
                        "AppRunnerService",
                        "VPCConnector",
                        "ExistingVpcConnector",
                        "ExistingECSCluster",
                        "ExistingApplicationLoadBalancer",
                        "S3BucketName",
                        "DynamoDBTableName",
                        "SQSQueueUrl",
                        "SNSTopicArn",
                        "FilePath",
                        "ElasticBeanstalkVpc",
                        "DockerHttpPort"
                    ]
                },
                "DefaultValue": {
                    "type": [ "string", "null", "boolean", "integer" ],
                    "title": "The default value for the setting.",
                    "description": ""
                },
                "AllowedValues": {
                    "type": "array",
                    "title": "Allowed Values",
                    "description": "The list of allowed values for the setting.",
                    "items": {
                        "type": "string"
                    }
                },
                "ValueMapping": {
                    "type": "object",
                    "title": "Value Mapping",
                    "description": "Maps the values in the allowed values collection to display values. The keys in this object are the strings in the AllowdValues collection and the values are the displaye values."
                },
                "AdvancedSetting": {
                    "type": "boolean",
                    "title": "Advance Setting",
                    "description": "Info property to inform tooling whether the setting is advanced and doesn't need to be shown by default.",
                    "minLength": 1
                },
                "Updatable": {
                    "type": "boolean",
                    "title": "Updatable",
                    "description": "If the setting is false the setting can not be changed during redeployment.",
                    "minLength": 1
                },
                "DependsOn": {
                    "type": "array",
                    "title": "",
                    "description": "",
                    "items": {
                        "type": "object",
                        "additionalProperties": false,
                        "required": [ "Id", "Value" ],
                        "properties": {
                            "Id": {
                                "type": "string",
                                "title": "",
                                "description": "",
                                "minLength": 1
                            },
                            "Operation": {
                                "type": "string",
                                "title": "Operation",
                                "description": "The operation to perform to compute the DependsOn relationship.",
                                "enum": [
                                    "NotEmpty",
                                    "Equals"
                                ]
                            },
                            "Value": {
                                "type": [ "boolean", "string" ],
                                "title": "",
                                "description": ""
                            }
                        }
                    }
                },
                "ChildOptionSettings": {
                    "items": { "$ref": "#/definitions/OptionSetting" }
                },
                "TypeHintData": {
                    "type": "object",
                    "title": "Type hint additional data",
                    "description": "Additional data required to process option setting.",
                    "properties": {
                        "ServicePrincipal": {
                            "type": [ "string", "null" ]
                        }
                    }
                },
                "Validators": {
                    "type": "array",
                    "items": {
                        "type": "object",
                        "properties": {
                            "ValidatorType": {
                                "type": "string",
                                "enum": [
                                    "Range",
                                    "Regex",
                                    "Required",
                                    "DirectoryExists",
                                    "DockerBuildArgs",
                                    "DotnetPublishArgs",
                                    "ExistingResource",
                                    "FileExists",
                                    "StringLength",
                                    "InstanceType",
                                    "WindowsInstanceType",
                                    "SubnetsInVpc",
                                    "SecurityGroupsInVpc",
                                    "Uri",
                                    "Comparison",
                                    "VPCSubnetsInDifferentAZs",
                                    "VpcExists"
                                ]
                            }
                        },
                        "allOf": [
                            {
                                "if": {
                                    "properties": { "ValidatorType": { "const": "Range" } }
                                },
                                "then": {
                                    "properties": {
                                        "Configuration": {
                                            "properties": {
                                                "Min": {
                                                    "type": "integer"
                                                },
                                                "Max": {
                                                    "type": "integer"
                                                },
                                                "AllowEmptyString": {
                                                    "type": "boolean"
                                                },
                                                "ValidationFailedMessage": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "if": {
                                    "properties": { "ValidatorType": { "const": "Regex" } }
                                },
                                "then": {
                                    "properties": {
                                        "Configuration": {
                                            "properties": {
                                                "Regex": {
                                                    "type": "string"
                                                },
                                                "ValidationFailedMessage": {
                                                    "type": "string"
                                                },
                                                "AllowEmptyString": {
                                                    "type": "boolean"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "if": {
                                    "properties": { "ValidatorType": { "const": "Required" } }
                                },
                                "then": {
                                    "properties": {
                                        "Configuration": {
                                            "properties": {
                                                "ValidationFailedMessage": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "if": {
                                    "properties": { "ValidatorType": { "const": "StringLength" } }
                                },
                                "then": {
                                    "properties": {
                                        "Configuration": {
                                            "properties": {
                                                "MinLength": {
                                                    "type": "integer"
                                                },
                                                "MaxLength": {
                                                    "type": "integer"
                                                },
                                                "ValidationFailedMessage": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "if": {
                                    "properties": { "ValidatorType": { "const": "Uri" } }
                                },
                                "then": {
                                    "properties": {
                                        "Configuration": {
                                            "properties": {
                                                "ValidationFailedMessage": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            },
                            {
                                "if": {
                                    "properties": { "ValidatorType": { "const": "VpcExists" } }
                                },
                                "then": {
                                    "properties": {
                                        "Configuration": {
                                            "properties": {
                                                "FailValue": {
                                                    "type": "boolean"
                                                },
                                                "DefaultVpc": {
                                                    "type": "boolean"
                                                },
                                                "ValueType": {
                                                    "type": "string"
                                                },
                                                "ValidationFailedMessage": {
                                                    "type": "string"
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        ]
                    }
                }
            }
        }
    }
}
